{"version":3,"sources":["container/PaymentContainer.js","container/PaymentListContainer.js","route/PaymentRoute.js","action/CustomerEntityAction.js","action/PaymentEntityAction.js","action/PaymentFormAction.js","container/CustomerContainer.js","route/CustomerRoute.js","data/HalService.js","action/HalAction.js","container/HalContainer.js","route/HalRoute.js","App.js","serviceWorker.js","action/AccountEntityAction.js","reducer/AccountEntityReducer.js","reducer/CustomerEntityReducer.js","reducer/PaymentEntityReducer.js","reducer/HalReducer.js","reducer/PaymentFormReducer.js","store/Store.js","reducer/RootReducer.js","index.js"],"names":["PaymentContainer","props","react_default","a","createElement","PaymentListContainer","PaymentRoute","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_router","path","concat","match","component","exact","render","Component","REQUEST_CUSTOMER","REQUEST_CUSTOMER_SUCCESS","REQUEST_CUSTOMER_ERROR","SELECT_CUSTOMER","fetchCustomer","id","dispatch","type","requestCustomer","fetchUrl","fetch","then","response","json","error","err","msg","customer","REQUEST_PAYMENT","REQUEST_PAYMENT_SUCCESS","REQUEST_PAYMENT_ERROR","fetchPayment","customerId","payments","PAYMENT_FORM_UPDATED","SAVE_PAYMENT","SAVE_PAYMENT_SUCCESS","SAVE_PAYMENT_ERROR","postPayment","payment","savePayment","payment_to","payment_from","description","payment_date","paymentDate","method","mode","headers","Content-Type","body","JSON","stringify","NewPaymentModal","Modal","trigger","Button","size","Header","icon","content","Content","Form","Field","onChange","e","onUpdate","target","from","amount","currency","Actions","basic","color","inverted","Icon","name","onClick","onSave","data","Payments","map","p","Table","Row","Cell","creation_date","status","celled","HeaderCell","Body","Customer","selectCustomer","Container","loading","isBusy","toString","Input","paymentMethod","paymentForm","updatePaymentForm","CustomerContainer","connect","state","customers","selectedCustomerId","byId","byCustomerId","CustomerRoute","params","ketting","Ketting","URL_UPDATE","PATH_UPDATE","REQ_HAL","REQ_HAL_SUCCESS","REQ_HAL_ERROR","fetchHal","url","requestHal","console","log","resource","Hal","call","_this","evt","onUrlUpdated","onPathUpdated","HalContainer","ownProps","urlUpdate","pathUpdate","onFetch","HalRoute","Nav","className","App","react_router_dom","Boolean","window","location","hostname","REQUEST_ACCOUNT","REQUEST_ACCOUNT_SUCCESS","REQUEST_ACCOUNT_ERROR","accountEntityReducer","length","undefined","allIds","action","assign","handleRequestAccount","handleRequestAccountError","customerEntityReducer","handleRequestCustomer","newstate","handleRequestCustomerSuccess","handleRequestCustomerError","handleSelectCustomer","paymentEntityReducer","handleRequestPayment","_embedded","forEach","push","handleRequestPaymentSuccess","handleRequestPaymentError","halReducer","handleUrlUpdate","handlePathUpdate","handleRequestHal","handleRequestHalSuccess","handleRequestHalError","paymentFormReducer","handlePaymentFormUpdated","loggerMiddleware","createLogger","store","createStore","accounts","hal","applyMiddleware","thunkMiddleware","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.098bb05a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function PaymentContainer(props) {\r\n    return (\r\n        <div>Hello Payment Container</div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport function PaymentListContainer(props) {\r\n    return (\r\n        <div>Hello Payment List Container</div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom'\r\nimport { PaymentContainer } from '../container/PaymentContainer'\r\nimport { PaymentListContainer } from '../container/PaymentListContainer'\r\n\r\nexport class PaymentRoute extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Route path={`${this.props.match.path}/:id`} component={PaymentContainer} />\r\n                <Route\r\n                    exact\r\n                    path={this.props.match.path}\r\n                    render={() => {\r\n                        return (\r\n                            <div>\r\n                                <PaymentListContainer />\r\n                            </div>\r\n                        )\r\n                    }\r\n                    }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}","import fetch from 'cross-fetch'\r\n\r\nexport const REQUEST_CUSTOMER = 'REQUEST_CUSTOMER'\r\nexport const REQUEST_CUSTOMER_SUCCESS = 'REQUEST_CUSTOMER_SUCCESS'\r\nexport const REQUEST_CUSTOMER_ERROR = 'REQUEST_CUSTOMER_ERROR'\r\nexport const SELECT_CUSTOMER = 'SELECT_CUSTOMER'\r\n\r\nexport function selectCustomer(id) {\r\n    return {\r\n        type: SELECT_CUSTOMER,\r\n        id\r\n    }\r\n}\r\n\r\nexport function requestCustomer(id) {\r\n    return {\r\n        type: REQUEST_CUSTOMER,\r\n        id\r\n    }\r\n}\r\n\r\nexport function requestCustomerSuccess(customer) {\r\n    return {\r\n        type: REQUEST_CUSTOMER_SUCCESS,\r\n        customer\r\n    }\r\n}\r\n\r\nexport function requestCustomerError(err) {\r\n    return {\r\n        type: REQUEST_CUSTOMER_ERROR,\r\n        err\r\n    }\r\n}\r\n\r\nexport function fetchCustomer(id) {\r\n    return function (dispatch) {\r\n        dispatch(requestCustomer(id));\r\n\r\n        const fetchUrl = 'http://35.228.187.212:8080/customerservice/customers/' + id\r\n        return (\r\n            fetch(fetchUrl)\r\n                .then(\r\n                    response => response.json(),\r\n                    error => {\r\n                        dispatch(\r\n                            requestCustomerError({\r\n                                msg: 'Error fetching customer',\r\n                                id\r\n                            })\r\n                        );\r\n                    }\r\n                )\r\n                .then(json => dispatch(requestCustomerSuccess(json)))\r\n        );\r\n    };\r\n}","import fetch from 'cross-fetch'\r\n\r\nexport const REQUEST_PAYMENT = 'REQUEST_PAYMENT'\r\nexport const REQUEST_PAYMENT_SUCCESS = 'REQUEST_PAYMENT_SUCCESS'\r\nexport const REQUEST_PAYMENT_ERROR = 'REQUEST_PAYMENT_ERROR'\r\n\r\nexport function requestPayment(id) {\r\n    return {\r\n        type: REQUEST_PAYMENT,\r\n        id\r\n    }\r\n}\r\n\r\nexport function requestPaymentSuccess(payments) {\r\n    return {\r\n        type: REQUEST_PAYMENT_SUCCESS,\r\n        payments\r\n    }\r\n}\r\n\r\nexport function requestPaymentError(err) {\r\n    return {\r\n        type: REQUEST_PAYMENT_ERROR,\r\n        err\r\n    }\r\n}\r\n\r\nexport function fetchPayment(customerId) {\r\n    return function (dispatch) {\r\n        dispatch(requestPayment(customerId));\r\n\r\n        const fetchUrl = 'http://192.168.99.100:8080/payments/' + customerId\r\n        return (\r\n            fetch(fetchUrl)\r\n                .then(\r\n                    response => response.json(),\r\n                    error => {\r\n                        dispatch(\r\n                            requestPaymentError({\r\n                                msg: 'Error fetching payment',\r\n                                customerId\r\n                            })\r\n                        );\r\n                    }\r\n                )\r\n                .then(json => dispatch(requestPaymentSuccess(json)))\r\n        );\r\n    };\r\n}","export const PAYMENT_FORM_UPDATED = 'PAYMENT_FORM_UPDATED'\r\nexport const SAVE_PAYMENT = 'SAVE_PAYMENT'\r\nexport const SAVE_PAYMENT_SUCCESS = 'SAVE_PAYMENT_SUCCESS'\r\nexport const SAVE_PAYMENT_ERROR = 'SAVE_PAYMENT_ERROR'\r\n\r\nexport function updatePaymentForm(data) {\r\n    return {\r\n        type: PAYMENT_FORM_UPDATED,\r\n        data\r\n    }\r\n}\r\n\r\nexport function savePayment(payment) {\r\n    return {\r\n        type: SAVE_PAYMENT,\r\n        payment\r\n    }\r\n}\r\n\r\nexport function savePaymentSuccess(payment) {\r\n    return {\r\n        type: SAVE_PAYMENT_SUCCESS,\r\n        payment\r\n    }\r\n}\r\n\r\nexport function savePaymentError(err) {\r\n    return {\r\n        type: SAVE_PAYMENT_ERROR,\r\n        err\r\n    }\r\n}\r\n\r\nexport function postPayment(payment) {\r\n    return function (dispatch) {\r\n        dispatch(savePayment(payment))\r\n        const customerId = payment.payment_to\r\n        payment.payment_from = 'FK'\r\n        payment.description = 'TFP'\r\n        payment.payment_date = payment.paymentDate\r\n        const postUrl = 'http://192.168.99.100:8080/payments/' + customerId\r\n        return (\r\n            fetch(postUrl, {\r\n                method: 'POST',\r\n                mode: 'no-cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(payment)\r\n            })\r\n                .then(\r\n                    response => response.json(),\r\n                    error => {\r\n                        dispatch(\r\n                            savePaymentError({\r\n                                msg: 'Error fetching payment',\r\n                                customerId\r\n                            })\r\n                        );\r\n                    }\r\n                )\r\n                .then(json => dispatch(savePaymentSuccess(json)))\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { Container, Form, Input, Header, Table, Modal, Button, Icon, Tab } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchCustomer, selectCustomer } from '../action/CustomerEntityAction'\r\nimport { fetchPayment } from '../action/PaymentEntityAction'\r\nimport { updatePaymentForm, postPayment } from '../action/PaymentFormAction'\r\n\r\n\r\n\r\nfunction NewPaymentModal(props) {\r\n\r\n    return (\r\n        <Modal trigger={<Button>New payment</Button>} size='small'>\r\n            <Header icon='archive' content='Archive Old Messages' />\r\n            <Modal.Content>\r\n            <Form>\r\n                <Form.Field>\r\n                    <label>Payment Date</label>\r\n                    <input type='text' value={props.paymentDate} onChange={(e) => props.onUpdate({payment_to: props.id, paymentDate: e.target.value})}></input>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>From</label>\r\n                    <input type='text' value={props.from} onChange={(e) => props.onUpdate({payment_to: props.id, from: e.target.value})}></input>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Amount</label>\r\n                    <input type='text' value={props.amount} onChange={(e) => props.onUpdate({payment_to: props.id, amount: e.target.value})}></input>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Currency</label>\r\n                    <input type='text' value={props.currency} onChange={(e) => props.onUpdate({payment_to: props.id, currency: e.target.value})}></input>\r\n                </Form.Field>\r\n            </Form>\r\n                \r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted>\r\n                    <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={(e) => props.onSave(props.data)}>\r\n                    <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nfunction Payments(props) {\r\n    const payments = props.payments ? props.payments.map(p => {\r\n        return (\r\n            <Table.Row key={p.id}>\r\n                <Table.Cell>{p.payment_date}</Table.Cell>\r\n                <Table.Cell>{p.creation_date}</Table.Cell>\r\n                <Table.Cell>{p.payment_from}</Table.Cell>\r\n                <Table.Cell>{p.payment_to}</Table.Cell>\r\n                <Table.Cell>{p.amount}</Table.Cell>\r\n                <Table.Cell>{p.currency}</Table.Cell>\r\n                <Table.Cell>{p.status}</Table.Cell>\r\n                <Table.Cell>{p.description}</Table.Cell>\r\n            </Table.Row>\r\n        )\r\n    }) : []\r\n\r\n    return (\r\n        < Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Payment Date</Table.HeaderCell>\r\n                    <Table.HeaderCell>Creation Date</Table.HeaderCell>\r\n                    <Table.HeaderCell>From</Table.HeaderCell>\r\n                    <Table.HeaderCell>To</Table.HeaderCell>\r\n                    <Table.HeaderCell>Amount</Table.HeaderCell>\r\n                    <Table.HeaderCell>Currency</Table.HeaderCell>\r\n                    <Table.HeaderCell>Status</Table.HeaderCell>\r\n                    <Table.HeaderCell>Description</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n\r\n            <Table.Body>\r\n                {payments}\r\n            </Table.Body>\r\n        </Table >\r\n    )\r\n}\r\n\r\nclass Customer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchCustomer(this.props.id)\r\n        this.props.selectCustomer(this.props.id)\r\n        this.props.fetchPayment(this.props.id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container loading={this.props.isBusy.toString()}>\r\n                <Header size='medium'>Customer</Header>\r\n                <Form>\r\n                    <Form.Field>\r\n                        <label>Id</label>\r\n                        <Input>{this.props.id}</Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Name</label>\r\n                        <Input>{this.props.name}</Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Payment Method</label>\r\n                        <Input>{this.props.paymentMethod}</Input>\r\n                    </Form.Field>\r\n                </Form>\r\n                <NewPaymentModal id={this.props.id} data={this.props.paymentForm} onUpdate={this.props.updatePaymentForm} onSave={this.props.postPayment}></NewPaymentModal>\r\n                <Payments payments={this.props.payments}></Payments>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    if (state.customers.isBusy || state.payments.isBusy || !state.customers.selectedCustomerId) {\r\n        return {\r\n            isBusy: true,\r\n            name: null,\r\n            paymentMethod: null,\r\n            payments: [],\r\n            paymentForm: null\r\n        }\r\n    }\r\n\r\n\r\n    return {\r\n        isBusy: true,\r\n        name: state.customers.byId[state.customers.selectedCustomerId].name,\r\n        paymentMethod: state.customers.byId[state.customers.selectedCustomerId].paymentMethod,\r\n        payments: state.payments.byCustomerId[state.customers.selectedCustomerId],\r\n        paymentForm: state.paymentForm\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchCustomer: (id) => dispatch(fetchCustomer(id)),\r\n        selectCustomer: (id) => dispatch(selectCustomer(id)),\r\n        fetchPayment: (id) => dispatch(fetchPayment(id)),\r\n        updatePaymentForm: (data) => dispatch(updatePaymentForm(data)),\r\n        postPayment: (payment) => dispatch(postPayment(payment))\r\n    }\r\n}\r\n\r\nexport const CustomerContainer = connect(mapStateToProps, mapDispatchToProps)(Customer)","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom'\r\nimport { CustomerContainer } from '../container/CustomerContainer'\r\nimport { CustomerListContainer } from '../container/CustomerListContainer'\r\nimport { fetchCustomer } from '../action/CustomerEntityAction'\r\nimport { connect } from 'react-redux'\r\n\r\nexport class CustomerRoute extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <CustomerContainer id={this.props.match.params.id}></CustomerContainer>\r\n            // <div>\r\n                \r\n            //     <Route path={`${this.props.match.path}/:id`} component={CustomerContainer} />\r\n                \r\n            // </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         match: state.match\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         onFetchCustomer: (id) => dispatch(fetchCustomer(id))\r\n//     }\r\n// }\r\n\r\n//export const CustomerRoute = connect(mapStateToProps, mapDispatchToProps)(InternalCustomerRoute)","import { Ketting } from 'ketting'\r\n\r\nconst API_URL = 'https://api.example.org/'\r\n\r\nexport const ketting = new Ketting(API_URL);\r\n","import { ketting } from '../data/HalService'\r\n\r\nexport const URL_UPDATE = 'URL_UPDATE'\r\nexport const PATH_UPDATE = 'PATH_UPDATE'\r\nexport const REQ_HAL = 'REQ_HAL'\r\nexport const REQ_HAL_SUCCESS = 'REQ_HAL_SUCCESS'\r\nexport const REQ_HAL_ERROR = 'REQ_HAL_ERROR'\r\n\r\nexport function urlUpdate(url) {\r\n    return {\r\n        type: URL_UPDATE,\r\n        url\r\n    }\r\n}\r\n\r\nexport function pathUpdate(path) {\r\n    return {\r\n        type: PATH_UPDATE,\r\n        path\r\n    }\r\n}\r\n\r\nexport function requestHal(url, path) {\r\n    return {\r\n        type: REQ_HAL,\r\n        url,\r\n        path\r\n    }\r\n}\r\n\r\nexport function requestHalSuccess(resource) {\r\n    return {\r\n        type: REQ_HAL_SUCCESS,\r\n        resource\r\n    }\r\n}\r\n\r\nexport function requestHalError(err) {\r\n    return {\r\n        type: REQ_HAL_ERROR,\r\n        err\r\n    }\r\n}\r\n\r\nexport function fetchHal(url, path) {\r\n    return function (dispatch) {\r\n        dispatch(requestHal(url, path));\r\n\r\n        const fetchUrl = url + path\r\n        return (\r\n            ketting.fetch(fetchUrl)\r\n                .then(\r\n                    response => response.json(),\r\n                    error => {\r\n                        console.log(\"error fetching account\");\r\n                        dispatch(\r\n                            requestHalError({\r\n                                msg: 'Error fetching account',\r\n                                url,\r\n                                path\r\n                            })\r\n                        );\r\n                    }\r\n                )\r\n                .then(json => dispatch(requestHalSuccess(json)))\r\n        );\r\n    };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { urlUpdate, pathUpdate, fetchHal } from '../action/HalAction'\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nclass Hal extends Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <input type='text' onChange={(evt) => this.props.onUrlUpdated(evt.target.value)} ></input>\r\n            <input type='text' onChange={(evt) => this.props.onPathUpdated(evt.target.value)}></input>\r\n            <button>Fetch</button>\r\n            <Button>Fetch</Button>\r\n            <div>{JSON.stringify(this.props.resource)}</div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        url: state.url,\r\n        path: state.path,\r\n        resource: state.resource\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onUrlUpdated: (url) => dispatch(urlUpdate(url)),\r\n        onPathUpdated: (path) => dispatch(pathUpdate(path)),\r\n        onFetch: (url, path) => dispatch(fetchHal(url, path))\r\n    }\r\n}\r\n\r\nexport const HalContainer = connect(mapStateToProps, mapDispatchToProps)(Hal)\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom'\r\nimport { HalContainer } from '../container/HalContainer'\r\n\r\nexport class HalRoute extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Route\r\n                    exact\r\n                    path={this.props.match.path}\r\n                    render={() => {\r\n                        return (\r\n                            <div>\r\n                                <HalContainer />\r\n                            </div>\r\n                        )\r\n                    }\r\n                    }\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport { PaymentRoute } from './route/PaymentRoute'\r\nimport { CustomerRoute } from './route/CustomerRoute'\r\nimport { HalRoute } from './route/HalRoute'\r\n\r\nfunction Nav() {\r\n  return (\r\n    <header className='nav' ></header>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Nav ></Nav>\r\n      <Router>\r\n        <Route path='/payment' component={PaymentRoute}></Route>\r\n        <Route path='/customer/:id' component={CustomerRoute}></Route>\r\n        <Route path='/hal' component={HalRoute}></Route>\r\n        {/* <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n        </a>\r\n        </header>\r\n      </div> */}\r\n      </Router>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import fetch from 'cross-fetch'\r\n\r\nexport const REQUEST_ACCOUNT = 'REQUEST_ACCOUNT'\r\nexport const REQUEST_ACCOUNT_SUCCESS = 'REQUEST_ACCOUNT_SUCCESS'\r\nexport const REQUEST_ACCOUNT_ERROR = 'REQUEST_ACCOUNT_ERROR'\r\n\r\nexport function requestAccount(id) {\r\n    return {\r\n        type: REQUEST_ACCOUNT,\r\n        id\r\n    }\r\n}\r\n\r\nexport function requestAccountSuccess(accounts) {\r\n    return {\r\n        type: REQUEST_ACCOUNT_SUCCESS,\r\n        accounts\r\n    }\r\n}\r\n\r\nexport function requestAccountError(err) {\r\n    return {\r\n        type: REQUEST_ACCOUNT_ERROR,\r\n        err\r\n    }\r\n}\r\n\r\nexport function fetchAccount(id) {\r\n    return function (dispatch) {\r\n        dispatch(requestAccount(id));\r\n\r\n        const fetchUrl = 'api/account' + id ? '/' + id : ''\r\n        return (\r\n            fetch(fetchUrl)\r\n                .then(\r\n                    response => response.json(),\r\n                    error => {\r\n                        console.log(\"error fetching account\");\r\n                        dispatch(\r\n                            requestAccountError({\r\n                                msg: 'Error fetching account',\r\n                                id\r\n                            })\r\n                        );\r\n                    }\r\n                )\r\n                .then(json => dispatch(requestAccountSuccess(json)))\r\n        );\r\n    };\r\n}","import { REQUEST_ACCOUNT, REQUEST_ACCOUNT_SUCCESS, REQUEST_ACCOUNT_ERROR } from '../action/AccountEntityAction'\r\n\r\nexport function accountEntityReducer(state = { isBusy: false, allIds: [] }, action) {\r\n    switch (action.type) {\r\n        case REQUEST_ACCOUNT:\r\n            return handleRequestAccount(state, action)\r\n        case REQUEST_ACCOUNT_SUCCESS:\r\n            return handleRequestAccountSuccess(state, action)\r\n        case REQUEST_ACCOUNT_ERROR:\r\n            return handleRequestAccountError(state, action)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction handleRequestAccount(state, action) {\r\n    return Object.assign({}, state, { isBusy: true })\r\n}\r\n\r\nfunction handleRequestAccountSuccess(state, action) {\r\n    return Object.assign({}, state, { isBusy: false })\r\n}\r\n\r\nfunction handleRequestAccountError(state, action) {\r\n    return Object.assign({}, state, { isBusy: false })\r\n}","import { REQUEST_CUSTOMER, REQUEST_CUSTOMER_SUCCESS, REQUEST_CUSTOMER_ERROR, SELECT_CUSTOMER } from '../action/CustomerEntityAction'\r\n\r\nexport function customerEntityReducer(state = { isBusy: false, byId: {}, allIds: [], selectedCustomerId: null }, action) {\r\n    switch (action.type) {\r\n        case REQUEST_CUSTOMER:\r\n            return handleRequestCustomer(state, action)\r\n        case REQUEST_CUSTOMER_SUCCESS:\r\n            return handleRequestCustomerSuccess(state, action)\r\n        case REQUEST_CUSTOMER_ERROR:\r\n            return handleRequestCustomerError(state, action)\r\n        case SELECT_CUSTOMER:\r\n            return handleSelectCustomer(state, action)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction handleRequestCustomer(state, action) {\r\n    return Object.assign({}, state, { isBusy: true })\r\n}\r\n\r\nfunction handleRequestCustomerSuccess(state, action) {\r\n    const newstate = Object.assign({}, state, { isBusy: false })\r\n    newstate.byId[action.customer.id] = action.customer\r\n\r\n    return newstate\r\n}\r\n\r\nfunction handleRequestCustomerError(state, action) {\r\n    return Object.assign({}, state, { isBusy: false })\r\n}\r\n\r\nfunction handleSelectCustomer(state, action) {\r\n    return Object.assign({}, state, {selectedCustomerId: action.id})\r\n}","import { REQUEST_PAYMENT, REQUEST_PAYMENT_SUCCESS, REQUEST_PAYMENT_ERROR } from '../action/PaymentEntityAction'\r\n\r\nexport function paymentEntityReducer(state = { isBusy: false, byCustomerId: {}, allIds: [] }, action) {\r\n    switch (action.type) {\r\n        case REQUEST_PAYMENT:\r\n            return handleRequestPayment(state, action)\r\n        case REQUEST_PAYMENT_SUCCESS:\r\n            return handleRequestPaymentSuccess(state, action)\r\n        case REQUEST_PAYMENT_ERROR:\r\n            return handleRequestPaymentError(state, action)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction handleRequestPayment(state, action) {\r\n    return Object.assign({}, state, { isBusy: true })\r\n}\r\n\r\nfunction handleRequestPaymentSuccess(state, action) {\r\n    const newstate = Object.assign({}, state, { isBusy: false })\r\n\r\n    if(!action.payments || !action.payments._embedded) {\r\n        return newstate\r\n    }\r\n    \r\n    action.payments._embedded['rel:payment'].forEach(payment => {\r\n        const customerId = payment.payment_to\r\n\r\n        if(!newstate.byCustomerId[customerId]) {\r\n            newstate.byCustomerId[customerId] = []  \r\n        }\r\n\r\n        newstate.byCustomerId[customerId].push(payment)\r\n    })\r\n\r\n    return newstate\r\n}\r\n\r\nfunction handleRequestPaymentError(state, action) {\r\n    return Object.assign({}, state, { isBusy: false })\r\n}","import { URL_UPDATE, PATH_UPDATE, REQ_HAL, REQ_HAL_SUCCESS, REQ_HAL_ERROR } from '../action/HalAction'\r\n\r\nexport function halReducer(state, action) {\r\n    switch (action.type) {\r\n        case URL_UPDATE:\r\n            return handleUrlUpdate(state, action)\r\n        case PATH_UPDATE:\r\n            return handlePathUpdate(state, action)\r\n        case REQ_HAL:\r\n            return handleRequestHal(state, action)\r\n        case REQ_HAL_SUCCESS:\r\n            return handleRequestHalSuccess(state, action)\r\n        case REQ_HAL_ERROR:\r\n            return handleRequestHalError(state, action)\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction handleUrlUpdate(state, action) {\r\n    return Object.assign({}, state, {url: action.url})\r\n}\r\n\r\nfunction handlePathUpdate(state, action) {\r\n    return Object.assign({}, state, {path: action.path})\r\n}\r\n\r\nfunction handleRequestHal(state, action) {\r\n    return Object.assign({}, state, {isBusy: true})\r\n}\r\n\r\nfunction handleRequestHalSuccess(state, action) {\r\n    return Object.assign({}, state, {\r\n        isBusy: false,\r\n        resource: action.resource,\r\n        err: undefined\r\n    })\r\n}\r\n\r\nfunction handleRequestHalError(state, action) {\r\n    return Object.assign({}, state, {\r\n        isBusy: false,\r\n        resource: null,\r\n        err: action.err\r\n    })\r\n}","import {PAYMENT_FORM_UPDATED} from '../action/PaymentFormAction'\r\n\r\nexport function paymentFormReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case PAYMENT_FORM_UPDATED:\r\n            return handlePaymentFormUpdated(state, action)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction handlePaymentFormUpdated(state, action) {\r\n    return Object.assign({}, state, action.data)\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport { rootReducer } from '../reducer/RootReducer'\r\n\r\nconst loggerMiddleware = createLogger()\r\n\r\nexport const store = createStore(\r\n    rootReducer, \r\n    {}, \r\n    applyMiddleware(\r\n        thunkMiddleware,\r\n        loggerMiddleware\r\n    )\r\n);\r\n","import { accountEntityReducer } from './AccountEntityReducer'\r\nimport { customerEntityReducer } from './CustomerEntityReducer'\r\nimport { paymentEntityReducer } from './PaymentEntityReducer'\r\nimport { halReducer } from './HalReducer'\r\nimport { paymentFormReducer } from './PaymentFormReducer'\r\n\r\nexport function rootReducer(state, action) {\r\n    return {\r\n        accounts: accountEntityReducer(state.accounts, action),\r\n        customers: customerEntityReducer(state.customers, action),\r\n        payments: paymentEntityReducer(state.payments, action),\r\n        hal: halReducer(state.hal, action),\r\n        paymentForm: paymentFormReducer(state.paymentForm, action)\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n// import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/Store'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}